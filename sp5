CREATE OR REPLACE PROCEDURE elt.sp_navaera_eftr_5_incoming_parties(param_load_date character varying(10))
 LANGUAGE plpgsql
AS $_$
DECLARE
    v_load_date date := param_load_date::date;
BEGIN    
    -- Drop and create a temporary table to hold the initial data
    DROP TABLE IF EXISTS #start;
    CREATE TEMP TABLE #start AS
    SELECT x.load_date,
           x.pswd_refno,
           x.insight_date,
           x.insight_accountid,
           x.insight_accountnum,
           x.transfer_crossborder,
           x.psd_in_type,
           x.rectype,
           x.bus_type,
           CASE 
               WHEN substring(name, 1, 3) IN ('MR ', 'MS ') THEN substring(name, 4, len(name) - 3)
               WHEN substring(name, 1, 4) = 'MRS ' THEN substring(name, 5, len(name) - 4)
               ELSE name
           END AS name,
           fi_id,
           role_type,
           'NO_' || x.ea_nonowner_id::varchar(10) AS nonowner_id
    FROM (
        SELECT a.load_date,
               a.pswd_refno,
               a.insight_date,
               a.insight_accountid,
               a.insight_accountnum,
               b.transfer_crossborder,
               b.psd_in_type,
               c.rectype,
               CASE 
                   WHEN upper(c.rectype) IN ('ORD_INST', 'ACCTWITHINST', 'INTERMEDIARYINS') THEN 'ENTITY' 
                   ELSE c.type 
               END AS bus_type,
               CASE 
                   WHEN rectype IN ('Benf_Cust', 'Ord_Cust') THEN regexp_replace(replace(upper(coalesce(entityname, fname || ' ' || lname)), '.', ''), '[.'',/#!$%^&*;:{}=_`~()-]')
                   ELSE regexp_replace(replace(upper(name), '.', ''), '[.'',/#!$%^&*;:{}=_`~()-]')
               END AS name,
               CASE 
                   WHEN rectype IN ('AcctWithInst', 'Ord_Inst', 'InterMediaryIns') THEN fiid 
                   ELSE NULL 
               END AS fi_id,
               CASE 
                   WHEN upper(rectype) = 'ORD_CUST' THEN 'Requester'
                   WHEN upper(rectype) = 'BENF_CUST' THEN 'Beneficiary'
                   WHEN upper(rectype) = 'ORD_INST' THEN 'Initiator'
                   WHEN upper(rectype) = 'ACCTWITHINST' THEN 'Receiver'
                   WHEN upper(rectype) = 'INTERMEDIARYINS' THEN 'Involvements inside completing action'
                   ELSE NULL
               END AS role_type,
               a.eftr_exclusion,
               d.ea_nonowner_id
        FROM elt.eftr_pswd_wires_incoming_transfers a
        LEFT JOIN elt.eftr_pswd_wires_metric b ON a.pswd_refno = b.pswd_refno
        LEFT JOIN elt.eftr_pswd_wires_by_rectype c ON a.pswd_refno = c.pswd_refno
            AND upper(c.rectype) IN ('BENF_CUST', 'ORD_CUST', 'ORD_INST', 'ACCTWITHINST', 'INTERMEDIARYINS')
        LEFT JOIN elt.fcrm_non_owner_party_info d ON upper(c.rectype) = 'ORD_CUST'
            AND MD5(REGEXP_REPLACE(UPPER(BTRIM(ISNULL(c.entityname::TEXT, '')) || BTRIM(ISNULL(c.fname::TEXT, '')) || BTRIM(ISNULL(c.lname::TEXT, '')) || BTRIM(ISNULL(c.mname::TEXT, '')) || BTRIM(ISNULL(c.line::TEXT, '')) || BTRIM(ISNULL(c.street::TEXT, '')) || BTRIM(ISNULL(c.city::TEXT, '')) || BTRIM(ISNULL(c.prov::TEXT, '')) || BTRIM(ISNULL(c.pcode::TEXT, '')) || BTRIM(ISNULL(c.country::TEXT, '')) || BTRIM(ISNULL(c.type::TEXT, ''))), '[|. ,/#!$%^&*;:{}=_`~()-]')) = d.src_nonowners_hash_bk
        WHERE a.load_date = v_load_date
    ) x;

    -- Drop and create a temporary table to hold the enriched data
    DROP TABLE IF EXISTS #start2;
    CREATE TEMP TABLE #start2 AS
    SELECT a.*,
           va.portfolioclass,
           trim(replace(upper(va.portfolioname), 'DBA ', '')) AS portfolioname,
           trim(replace(upper(va.portfoliotradename), 'DBA ', '')) AS portfoliotradename,
           CASE WHEN rectype = 'Benf_Cust' THEN coalesce(c.membernum, c2.membernum) ELSE NULL END AS membernum,
           CASE WHEN rectype = 'Benf_Cust' THEN coalesce(c.mbrbrokernum, c2.mbrbrokernum) ELSE NULL END AS mbrbrokernum,
           upper(CASE WHEN rectype = 'Benf_Cust' THEN regexp_replace(coalesce(c.fullname, c2.fullname), '[|.'',/#!$%^&*;:{}=_`~()-]') ELSE NULL END) AS mem_name,
           len(coalesce(c.fullname, c2.fullname)) - len(replace(coalesce(c.fullname, c2.fullname), ' ', '')) + 1 AS num_word,
           CASE WHEN rectype = 'Benf_Cust' THEN coalesce(b.jointtype, b2.jointtype) ELSE NULL END AS jointtype,
           CASE WHEN rectype = 'Benf_Cust' THEN coalesce(c.customertype, c2.customertype) ELSE NULL END AS customertype,
           CASE WHEN rectype = 'Benf_Cust' THEN coalesce(c.memberclass, c2.memberclass) ELSE NULL END AS memberclass,
           CASE WHEN role_type = 'Beneficiary' AND strpos(upper(name), ' AND ') > 0 AND va.portfolioclass = 'Personal' THEN 1 ELSE 0 END AS JointBenf,
           CASE WHEN role_type = 'Beneficiary' AND strpos(upper(name), '|') > 0 AND va.portfolioclass = 'Personal' THEN 1 ELSE 0 END AS LastFirstBenf,
           CASE WHEN name = trim(replace(upper(va.portfolioname), 'DBA ', '')) THEN 1 
                WHEN name = trim(replace(upper(va.portfoliotradename), 'DBA ', '')) THEN 1
                ELSE 0 END AS dba
    FROM #start a
    LEFT JOIN sm_transformed_insight.v_account va ON substring(a.insight_date, 1, 10) = va.part_date AND a.insight_accountnum = va.accountnum AND va.category = 'Deposit'
    LEFT JOIN sm_transformed_insight.v_accountjoint b ON va.part_date = b.part_date AND va.accountid = b.accountid
    LEFT JOIN sm_transformed_insight.v_customer c ON b.part_date = c.part_date AND b.memberid = c.memberid
    LEFT JOIN sm_transformed_insight.v_accountjoint b2 ON substring(a.insight_date, 1, 10) = b2.part_date AND a.insight_accountid = b2.accountid
    LEFT JOIN sm_transformed_insight.v_customer c2 ON b2.part_date = c2.part_date AND b2.memberid = c2.memberid;

    -- Drop and create a temporary table to hold the final data
    DROP TABLE IF EXISTS #final;
    CREATE TEMP TABLE #final AS
    SELECT 'Incoming' AS transfer_type,
           a.*,
           CASE 
               WHEN role_type IN ('Initiator', 'Receiver', 'InterMediaryIns') THEN a.bus_type
               WHEN insight_memberclass LIKE 'Personal%' THEN 'INDIVIDUAL'
               ELSE a.bus_type
           END AS pswd_bus_type,
           m.mdm_id,
           2 AS action_type_id,
           1 AS action_id,
           CASE 
               WHEN role_type = 'Requester' THEN 7
               WHEN role_type = 'Beneficiary' THEN 5
               WHEN role_type = 'Initiator' THEN 8
               WHEN role_type = 'Receiver' THEN 10
               WHEN role_type = 'InterMediaryIns' THEN 4
               ELSE NULL
           END AS record_type,
           CASE 
               WHEN role_type = 'Requester' THEN 0
               WHEN role_type = 'Beneficiary' THEN 0
               WHEN role_type = 'Initiator' THEN 0
               WHEN role_type = 'Receiver' THEN 0
               WHEN role_type = 'InterMediaryIns' THEN 0
               ELSE NULL
           END AS sub_record_type
    FROM #start2 a
    LEFT JOIN ean_mdm.mv_mdm_customer360_current_view m ON CASE WHEN a.insight_customertype IN ('Client Named (Agency)', 'Nominee (Agency)', 'NonOwner') THEN a.insight_mbrbrokernum ELSE a.insight_membernum END = m.t24_profile_num;

    -- Drop and create a temporary table to hold the final sequenced data
    DROP TABLE IF EXISTS #final_seq;
    CREATE TEMP TABLE #final_seq AS
    SELECT a.*,
           row_number() OVER (PARTITION BY pswd_refno, action_type_id, action_id, record_type) AS record_type_seq,
           row_number() OVER (PARTITION BY pswd_refno, action_type_id, action_id, record_type, sub_record_type) AS sub_record_type_seq,
           CASE 
               WHEN role_type = 'Auth' AND pswd_bus_type = 'INDIVIDUAL' THEN row_number() OVER (PARTITION BY pswd_refno, role_type, pswd_bus_type)
               ELSE NULL
           END AS auth_seq
    FROM #final a;

    -- Delete existing records for the load date
    DELETE FROM elt.eftr_pswd_wires_incoming_parties WHERE load_date = v_load_date;

    -- Insert the new records
    INSERT INTO elt.eftr_pswd_wires_incoming_parties
    SELECT * FROM #final_seq;

    -- Drop temporary tables
    DROP TABLE IF EXISTS #start;
    DROP TABLE IF EXISTS #start2;
    DROP TABLE IF EXISTS #final;
    DROP TABLE IF EXISTS #final_seq;

END;
$_$;
