CREATE OR REPLACE PROCEDURE elt.sp_navaera_eftr_5_incoming_parties(param_load_date character varying(10))
LANGUAGE plpgsql
AS $$
DECLARE
    v_load_date date:= param_load_date::date;
BEGIN

    -- Use a single CTE to combine the initial data preparation steps
    WITH start_data AS (
        SELECT
            a.load_date,
            a.pswd_refno,
            a.insight_date,
            a.insight_accountid,
            a.insight_accountnum,
            b.transfer_crossborder,
            b.psd_in_type,
            c.rectype,
            CASE
                WHEN upper(c.rectype) IN ('ORD_INST','ACCTWITHINST', 'INTERMEDIARYINS') THEN 'ENTITY'
                ELSE c.type
            END bus_type,
            CASE
                WHEN c.rectype IN ('Benf_Cust','Ord_Cust') THEN
                    REGEXP_REPLACE(
                        REPLACE(UPPER(COALESCE(c.entityname, c.fname || ' ' || c.lname)), '.', ''),
                        '[.,/#!$%^&*;:{}=_`~()-]'
                    )
                ELSE
                    REGEXP_REPLACE(
                        REPLACE(UPPER(c.name), '.',''),
                        '[.,/#!$%^&*;:{}=_`~()-]'
                    )
            END name,
            CASE
                WHEN c.rectype IN ('AcctWithInst', 'Ord_Inst','InterMediaryIns') THEN c.fiid
                ELSE NULL
            END fi_id,
            CASE
                WHEN upper(c.rectype) = 'ORD_CUST' THEN 'Requester'
                WHEN upper(c.rectype) = 'BENF_CUST' THEN 'Beneficiary'
                WHEN upper(c.rectype) = 'ORD_INST' THEN 'Initiator'
                WHEN upper(c.rectype) = 'ACCTWITHINST' THEN 'Receiver'
                WHEN upper(c.rectype) = 'INTERMEDIARYINS' THEN 'Involvements inside completing action'
                ELSE NULL
            END role_type,
            a.eftr_exclusion,
            d.ea_nonowner_id
        FROM
            elt.eftr_pswd_wires_incoming_transfers a
            LEFT JOIN elt.eftr_pswd_wires_metric b ON a.pswd_refno = b.pswd_refno
            LEFT JOIN elt.eftr_pswd_wires_by_rectype c ON a.pswd_refno = c.pswd_refno
                AND upper(c.rectype) IN ('BENF_CUST', 'ORD_CUST', 'ORD_INST','ACCTWITHINST','INTERMEDIARYINS')
            LEFT JOIN elt.fcrm_non_owner_party_info d ON upper(c.rectype) = 'ORD_CUST'
                AND MD5(REGEXP_REPLACE(
                    UPPER(
                        BTRIM(COALESCE(c.entityname::TEXT, '')) ||
                        BTRIM(COALESCE(c.fname::TEXT, '')) ||
                        BTRIM(COALESCE(c.lname::TEXT, '')) ||
                        BTRIM(COALESCE(c.mname::TEXT, '')) ||
                        BTRIM(COALESCE(c.line::TEXT, '')) ||
                        BTRIM(COALESCE(c.street::TEXT, '')) ||
                        BTRIM(COALESCE(c.city::TEXT, '')) ||
                        BTRIM(COALESCE(c.prov::TEXT, '')) ||
                        BTRIM(COALESCE(c.pcode::TEXT, '')) ||
                        BTRIM(COALESCE(c.country::TEXT, '')) ||
                        BTRIM(COALESCE(c.type::TEXT, ''))
                    ),
                    '[.,/#!$%^&*;:{}=_`~()-]'
                )) = d.src_nonowners_hash_bk
        WHERE
            a.load_date = v_load_date
    ),
    -- Combine the account and customer information into a single CTE
    account_customer_data AS (
        SELECT
            s.*,
            va.portfolioclass,
            TRIM(REPLACE(UPPER(va.portfolioname), 'DBA ', '')) AS portfolioname,
            TRIM(REPLACE(UPPER(va.portfoliotradename), 'DBA ', '')) AS portfoliotradename,
            COALESCE(c.membernum, c2.membernum) AS membernum,
            COALESCE(c.mbrbrokernum, c2.mbrbrokernum) AS mbrbrokernum,
            UPPER(COALESCE(c.fullname, c2.fullname)) AS mem_name,
            COALESCE(b.jointtype, b2.jointtype) AS jointtype,
            COALESCE(c.customertype, c2.customertype) AS customertype,
            COALESCE(c.memberclass, c2.memberclass) AS memberclass,
            CASE
                WHEN s.role_type = 'Beneficiary' AND strpos(UPPER(s.name), ' AND ') > 0 AND va.portfolioclass = 'Personal' THEN 1
                ELSE 0
            END JointBenf,
            CASE
                WHEN s.role_type = 'Beneficiary' AND strpos(UPPER(s.name), '|') > 0 AND va.portfolioclass = 'Personal' THEN 1
                ELSE 0
            END LastFirstBenf,
            CASE
                WHEN s.name = TRIM(REPLACE(UPPER(va.portfolioname), 'DBA ', '')) THEN 1
                WHEN s.name = TRIM(REPLACE(UPPER(va.portfoliotradename), 'DBA ', '')) THEN 1
                ELSE 0
            END dba
        FROM
            start_data s
            LEFT JOIN sm_transformed_insight.v_account va ON substring(s.insight_date, 1, 10) = va.part_date
                AND s.insight_accountnum = va.accountnum AND va.category = 'Deposit'
            LEFT JOIN sm_transformed_insight.v_accountjoint b ON va.part_date = b.part_date AND va.accountid = b.accountid
            LEFT JOIN sm_transformed_insight.v_customer c ON b.part_date = c.part_date AND b.memberid = c.memberid
            LEFT JOIN sm_transformed_insight.v_accountjoint b2 ON substring(s.insight_date, 1, 10) = b2.part_date
                AND s.insight_accountid = b2.accountid
            LEFT JOIN sm_transformed_insight.v_customer c2 ON b2.part_date = c2.part_date AND b2.memberid = c2.memberid
    ),
    -- Handle LastFirstBenf cases within a single CTE
    last_first_benf_data AS (
        SELECT
            ac.*,
            CASE
                WHEN split_part(ac.name, '|', 1) <> '' AND split_part(ac.name, '|', 2) <> '' THEN
                    split_part(ac.name, '|', 2) || ' ' || split_part(ac.name, '|', 1)
                ELSE
                    ac.name
            END AS name_updated
        FROM
            account_customer_data ac
        WHERE
            ac.LastFirstBenf = 1
    ),
    -- Handle JointBenf cases within a single CTE
    joint_benf_data AS (
        SELECT
            ac.*,
            CASE
                WHEN split_part(ac.name, ' AND ', 1) <> '' AND split_part(ac.name, ' AND ', 2) <> '' THEN
                    split_part(ac.name, ' AND ', 1) || ' ' || reverse(split_part(reverse(ac.name), ' AND ', 1))
                ELSE
                    ac.name
            END AS name_updated
        FROM
            account_customer_data ac
        WHERE
            ac.JointBenf = 1
    ),
    -- Combine all processed data into a single CTE
    combined_data AS (
        SELECT * FROM account_customer_data WHERE JointBenf = 0 AND LastFirstBenf = 0
        UNION ALL
        SELECT
            load_date,
            pswd_refno,
            insight_date,
            insight_accountid,
            insight_accountnum,
            transfer_crossborder,
            psd_in_type,
            rectype,
            bus_type,
            name_updated as name,
            fi_id,
            role_type,
            eftr_exclusion,
            ea_nonowner_id,
            portfolioclass,
            portfolioname,
            portfoliotradename,
            membernum,
            mbrbrokernum,
            mem_name,
            jointtype,
            customertype,
            memberclass,
            jointbenf,
            lastfirstbenf,
            dba
        FROM last_first_benf_data
        UNION ALL
        SELECT
            load_date,
            pswd_refno,
            insight_date,
            insight_accountid,
            insight_accountnum,
            transfer_crossborder,
            psd_in_type,
            rectype,
            bus_type,
            name_updated as name,
            fi_id,
            role_type,
            eftr_exclusion,
            ea_nonowner_id,
            portfolioclass,
            portfolioname,
            portfoliotradename,
            membernum,
            mbrbrokernum,
            mem_name,
            jointtype,
            customertype,
            memberclass,
            jointbenf,
            lastfirstbenf,
            dba
        FROM joint_benf_data
    ),
    -- Calculate 'same' flag within a single CTE
    same_data AS (
        SELECT
            c.*,
            CASE
                WHEN
                    c.name = c.mem_name OR
                    c.name2 = c.mem_name2 OR
                    c.name3 = c.mem_name3 OR
                    c.name4 = c.mem_name4 OR
                    c.name3 = c.mem_name5 OR
                    c.name6 = c.mem_name
                THEN 1
                ELSE 0
            END AS same
        FROM (
            SELECT
                cd.*,
                CASE
                    WHEN strpos(cd.mem_name, ' CO LTD') > 0 THEN TRIM(REPLACE(cd.mem_name, ' CO LTD', ''))
                    WHEN strpos(cd.mem_name, ' LTD') > 0 THEN TRIM(REPLACE(cd.mem_name, ' LTD', ''))
                    WHEN strpos(cd.mem_name, ' INC') > 0 THEN TRIM(REPLACE(cd.mem_name, ' INC', ''))
                    ELSE cd.mem_name
                END AS mem_name2,
                CASE
                    WHEN split_part(cd.mem_name, ' ', 1) <> '' AND split_part(cd.mem_name, ' ', 2) <> ''
                         AND split_part(cd.mem_name, ' ', 3) <> '' THEN
                        split_part(cd.mem_name, ' ', 1) || ' ' || reverse(split_part(reverse(cd.mem_name), ' ', 1))
                    ELSE
                        cd.mem_name
                END AS mem_name3,
                REPLACE(cd.mem_name, ' ', '') AS mem_name4,
                CASE
                    WHEN strpos(cd.mem_name, ' ') > 0 THEN
                        reverse(split_part(reverse(TRIM(cd.mem_name)), ' ', 1)) || ' ' || split_part(TRIM(cd.mem_name), ' ', 1)
                    ELSE
                        cd.mem_name
                END AS mem_name5,
                CASE
                    WHEN strpos(cd.name, ' CO LTD') > 0 THEN TRIM(REPLACE(cd.name, ' CO LTD', ''))
                    WHEN strpos(cd.name, ' LTD') > 0 THEN TRIM(REPLACE(cd.name, ' LTD', ''))
                    WHEN strpos(cd.name, ' INC') > 0 THEN TRIM(REPLACE(cd.name, ' INC', ''))
                    ELSE cd.name
                END AS name2,
                CASE
                    WHEN split_part(cd.name, ' ', 1) <> '' AND split_part(cd.name, ' ', 2) <> ''
                         AND split_part(cd.name, ' ', 3) <> '' THEN
                        split_part(cd.name, ' ', 1) || ' ' || reverse(split_part(reverse(cd.name), ' ', 1))
                    ELSE
                        cd.name
                END AS name3,
                REPLACE(cd.name, ' ', '') AS name4,
                CASE
                    WHEN strpos(TRIM(cd.name), ' ') > 0 THEN
                        reverse(split_part(reverse(TRIM(cd.name)), ' ', 1)) || ' ' || split_part(TRIM(cd.name), ' ', 1)
                    ELSE TRIM(cd.name)
                END AS name5,
                CASE
                    WHEN cd.role_type = 'Beneficiary' AND cd.portfolioclass LIKE 'Personal'
                         AND split_part(cd.name, ' ', 1) <> '' AND split_part(cd.name, ' ', 2) <> '' THEN
                        TRIM(split_part(cd.name, ' ', 2) || ' ' || split_part(cd.name, ' ', 1))
                    ELSE
                        cd.name
                END AS name6,
                CASE
                    WHEN cd.role_type = 'Beneficiary' AND len(cd.name) > 0 AND len(cd.mem_name) > 0 THEN elt.fn_led(cd.name, cd.mem_name)
                    ELSE NULL
                END AS led_score
            FROM
                combined_data cd
        ) c
    ),
    -- Calculate 'auth' data within a single CTE
    auth_data AS (
        SELECT DISTINCT
            sd.load_date,
            sd.pswd_refno,
            sd.insight_date,
            sd.insight_accountid,
            sd.insight_accountnum,
            sd.transfer_crossborder,
            sd.psd_in_type,
            'Auth' AS rectype,
            NULL AS name,
            NULL AS fi_id,
            sd.bus_type,
            'Auth' AS role_type,
            va.portfolioclass,
            COALESCE(c.membernum, c2.membernum) AS membernum,
            COALESCE(c.mbrbrokernum, c2.mbrbrokernum) AS mbrbrokernum,
            COALESCE(c.fullname, c2.fullname) AS mem_name,
            COALESCE(b.jointtype, b2.jointtype) AS jointtype,
            NULL AS same,
            COALESCE(c.customertype, c2.customertype) AS customertype,
            COALESCE(c.memberclass, c2.memberclass) AS memberclass
        FROM
            start_data sd
            LEFT JOIN sm_transformed_insight.v_account va ON substring(sd.insight_date, 1, 10) = va.part_date
                AND sd.insight_accountnum = va.accountnum AND va.category = 'Deposit'
            LEFT JOIN sm_transformed_insight.v_accountjoint b ON va.part_date = b.part_date AND va.accountid = b.accountid
            LEFT JOIN sm_transformed_insight.v_customer c ON b.part_date = c.part_date AND b.memberid = c.memberid
            LEFT JOIN sm_transformed_insight.v_accountjoint b2 ON substring(sd.insight_date, 1, 10) = b2.part_date
                AND sd.insight_accountid = b2.accountid
            LEFT JOIN sm_transformed_insight.v_customer c2 ON b2.part_date = c2.part_date AND b2.memberid = c2.memberid
        WHERE
            upper(sd.rectype) = 'BENF_CUST'
    ),
    -- Combine 'same' and 'auth' data into a single CTE
    final_data AS (
        SELECT
            'Incoming' AS transfer_type,
            sa.*,
            CASE
                WHEN sa.role_type IN ('Initiator', 'Receiver', 'InterMediaryIns') THEN sa.bus_type
                WHEN sa.insight_memberclass LIKE 'Personal%' THEN 'INDIVIDUAL'
                ELSE sa.bus_type
            END AS pswd_bus_type,
            m.mdm_id,
            2 AS action_type_id,
            1 AS action_id,
            CASE
                WHEN sa.role_type = 'Requester' THEN 7
                WHEN sa.role_type = 'Beneficiary' THEN 5
                WHEN sa.role_type = 'Initiator' THEN 8
                WHEN sa.role_type = 'Receiver' THEN 10
                WHEN sa.role_type = 'InterMediaryIns' THEN 4
                ELSE NULL
            END AS record_type,
            CASE
                WHEN sa.role_type = 'Requester' THEN 0
                WHEN sa.role_type = 'Beneficiary' THEN 0
                WHEN sa.role_type = 'Initiator' THEN 0
                WHEN sa.role_type = 'Receiver' THEN 0
                WHEN sa.role_type = 'InterMediaryIns' THEN 0
                ELSE NULL
            END AS sub_record_type
        FROM (
            SELECT
                sd.*,
                ROW_NUMBER() OVER (PARTITION BY sd.pswd_refno, sd.rectype ORDER BY sd.same DESC, sd.led_score) AS N,
                acd.insight_customertype -- Include insight_customertype
            FROM
                same_data sd
                LEFT JOIN account_customer_data acd ON sd.pswd_refno = acd.pswd_refno AND sd.rectype = acd.rectype  -- Join to get insight_customertype
        ) sa
        LEFT JOIN ean_mdm.mv_mdm_customer360_current_view m ON
            CASE
                WHEN sa.insight_customertype IN ('Client Named (Agency)', 'Nominee (Agency)', 'NonOwner') THEN sa.insight_mbrbrokernum
                ELSE sa.insight_membernum
            END = m.t24_profile_num
        WHERE
            sa.N = 1
        UNION ALL
        SELECT
            'Incoming' AS transfer_type,
            ad.*,
            CASE
                WHEN ad.role_type IN ('Initiator', 'Receiver', 'InterMediaryIns') THEN ad.bus_type
                WHEN ad.memberclass LIKE 'Personal%' THEN 'INDIVIDUAL'
                ELSE ad.bus_type
            END AS pswd_bus_type,
            NULL AS mdm_id,  -- No mdm_id for 'Auth' records
            2 AS action_type_id,
            1 AS action_id,
            CASE
                WHEN ad.role_type = 'Auth' THEN 5  -- Assuming 'Auth' maps to record_type 5
                ELSE NULL
            END AS record_type,
            CASE
                WHEN ad.role_type = 'Auth' THEN 0  -- Assuming 'Auth' maps to sub_record_type 0
                ELSE NULL
            END AS sub_record_type
        FROM
            auth_data ad
    ),
    -- Calculate final sequences within a single CTE
    final_seq_data AS (
        SELECT
            fd.*,
            row_number() over(partition by fd.pswd_refno, fd.action_type_id, fd.action_id, fd.record_type) AS record_type_seq,
            row_number() over(partition by fd.pswd_refno, fd.action_type_id, fd.action_id, fd.record_type, fd.sub_record_type) AS sub_record_type_seq,
            CASE
                WHEN fd.role_type = 'Auth' AND fd.pswd_bus_type = 'INDIVIDUAL' THEN
                    row_number() over(partition by fd.pswd_refno, fd.role_type, fd.pswd_bus_type)
                ELSE NULL
            END AS auth_seq
        FROM
            final_data fd
    )
    -- Delete existing data and insert new data
    DELETE FROM elt.eftr_pswd_wires_incoming_parties WHERE load_date = v_load_date;
    INSERT INTO elt.eftr_pswd_wires_incoming_parties
    SELECT * FROM final_seq_data;

END;
$$
